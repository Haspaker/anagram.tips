// Generated by LiveScript 1.2.0
(function(){
  var fs, ref$, countBy, groupBy, last, filter, reject, objToPairs, pairsToObj, unique, uniqueBy, sort, map, foldl1, primes, alphabet, alpha_indices, filepath, AnagramFinder;
  fs = require('fs');
  ref$ = require('prelude-ls'), countBy = ref$.countBy, groupBy = ref$.groupBy, last = ref$.last, filter = ref$.filter, reject = ref$.reject, objToPairs = ref$.objToPairs, pairsToObj = ref$.pairsToObj, unique = ref$.unique, uniqueBy = ref$.uniqueBy, sort = ref$.sort, map = ref$.map, foldl1 = ref$.foldl1;
  String.prototype.lowercase = String.prototype.toLowerCase;
  primes = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113];
  alphabet = ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", "w", "x", "y", "z"].concat(['å', 'ä', 'ö', 'é']);
  alpha_indices = pairsToObj(alphabet.map(function(c, i){
    return [c, i];
  }));
  filepath = function(langcode, wordlist, length){
    return "./words/" + langcode + "/" + wordlist + "/" + length + ".txt";
  };
  AnagramFinder = (function(){
    AnagramFinder.displayName = 'AnagramFinder';
    var prototype = AnagramFinder.prototype, constructor = AnagramFinder;
    prototype.get_prime_product = function(word){
      var prime_product, i$, ref$, len$, char;
      prime_product = 1;
      for (i$ = 0, len$ = (ref$ = word.lowercase()).length; i$ < len$; ++i$) {
        char = ref$[i$];
        if (in$(char, alphabet)) {
          prime_product *= primes[alpha_indices[char]];
        }
      }
      return prime_product;
    };
    prototype.find_anagrams_among_words = function(target_word, words){
      var target_prime_product, anagrams, i$, len$, word, prime_product;
      target_prime_product = this.get_prime_product(target_word);
      anagrams = [];
      for (i$ = 0, len$ = words.length; i$ < len$; ++i$) {
        word = words[i$];
        prime_product = this.get_prime_product(word);
        if (prime_product === target_prime_product) {
          anagrams.push(word);
        }
      }
      return filter(function(it){
        return it.lowercase() !== target_word.lowercase();
      })(
      uniqueBy(function(it){
        return it.lowercase();
      })(
      anagrams));
    };
    prototype.get_anagrams = function(word, wordlists, langcode, callback){
      var wordlength, found_anagrams, read_wordlist_files, i$, len$, results$ = [];
      word = word.toLowerCase();
      wordlists = wordlists.split(',');
      wordlength = function(it){
        return it.length;
      }(
      reject((function(it){
        return !in$(it, alphabet);
      }))(
      function(it){
        return it.split('');
      }(
      word)));
      if (wordlength < 2) {
        return callback([]);
      }
      found_anagrams = [];
      read_wordlist_files = 0;
      for (i$ = 0, len$ = wordlists.length; i$ < len$; ++i$) {
        results$.push((fn$.call(this, wordlists[i$])));
      }
      return results$;
      function fn$(wordlist){
        var this$ = this;
        return fs.readFile(filepath(langcode, wordlist, wordlength), {
          encoding: 'utf8'
        }, function(error, words){
          var anagrams;
          if (error) {
            console.log(error);
          } else {
            words = words.split('\n');
            anagrams = this$.find_anagrams_among_words(word, words);
            found_anagrams = found_anagrams.concat(map(function(anagram){
              return {
                language: langcode,
                source: wordlist,
                word: anagram
              };
            })(
            anagrams));
          }
          read_wordlist_files += 1;
          if (read_wordlist_files === wordlists.length) {
            return callback(found_anagrams);
          }
        });
      }
    };
    function AnagramFinder(){}
    return AnagramFinder;
  }());
  module.exports = new AnagramFinder();
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
