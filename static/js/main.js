// Generated by LiveScript 1.2.0
(function(){
  var ignored_chars, field_width, APIConnection, Settings, Navbar, Wordlists, Languages, Anagram, AnagramView, Suggestion, SuggestionView, AnagramValidator, AnagramValidatorView, AnagramFinder, AnagramFinderView, join$ = [].join;
  import$(this, require('prelude-ls'));
  ignored_chars = '§!#€%&/()=?`´^¨*"-_.,;:[]{}<>/' + "'" + " " + "\t";
  field_width = 350;
  APIConnection = (function(){
    APIConnection.displayName = 'APIConnection';
    var prototype = APIConnection.prototype, constructor = APIConnection;
    prototype.api_url = '/api';
    prototype.get_suggestions = function(word, wordlists, iso, callback){
      var request_url;
      request_url = this.api_url + ("/anagrams/" + iso + "/" + wordlists + "/" + word);
      $.ajax(request_url).done(callback);
      return $.ajax(request_url).error(function(){
        return callback([{
          language: 'en',
          wordlist: 'dict',
          word: '<span style="color:red">ERROR: COULD NOT CONNECT</span>'
        }]);
      });
    };
    prototype.get_languages = function(callback){
      var request_url;
      request_url = this.api_url + "/languages";
      return $.ajax(request_url).done(callback);
    };
    function APIConnection(){}
    return APIConnection;
  }());
  Settings = (function(superclass){
    var prototype = extend$((import$(Settings, superclass).displayName = 'Settings', Settings), superclass).prototype, constructor = Settings;
    prototype.connection = null;
    prototype.default_language = 'english';
    prototype.defaults = {
      page: 'finder',
      alphabet: '',
      languages: [],
      current_language: {},
      current_wordlists: ['dict']
    };
    prototype.initialize = function(){
      var this$ = this;
      this.connection = new APIConnection();
      return this.connection.get_languages(function(language_data){
        this$.set('alphabet', language_data.alphabet);
        this$.set('languages', language_data.languages);
        return this$.set('current_language', this$.language_from_name(this$.default_language));
      });
    };
    prototype.language_from_iso = function(iso){
      return find(function(it){
        return it.iso === iso;
      })(
      this.get('languages'));
    };
    prototype.language_from_name = function(name){
      return find(function(it){
        return it.name === name;
      })(
      this.get('languages'));
    };
    function Settings(){
      Settings.superclass.apply(this, arguments);
    }
    return Settings;
  }(Backbone.Model));
  Navbar = (function(superclass){
    var prototype = extend$((import$(Navbar, superclass).displayName = 'Navbar', Navbar), superclass).prototype, constructor = Navbar;
    prototype.el = 'body';
    prototype.events = {
      'click .navigation.find': function(){
        return this.set_page('finder');
      },
      'click .navigation.validate': function(){
        return this.set_page('validator');
      }
    };
    prototype.settings = null;
    prototype.initialize = function(){
      this.settings = window.settings;
      return this.listenTo(this.settings, 'change:page', this.change_page);
    };
    prototype.set_page = function(new_page){
      return this.settings.set('page', new_page);
    };
    prototype.change_page = function(){
      var time, moveLeft, ref$, toPage, fromPage;
      time = 500;
      switch (this.settings.get('page')) {
      case 'finder':
        moveLeft = '100%';
        ref$ = [$('#finder'), $('#validator')], toPage = ref$[0], fromPage = ref$[1];
        $('body').addClass('finder');
        break;
      case 'validator':
        moveLeft = '-100%';
        ref$ = [$('#validator'), $('#finder')], toPage = ref$[0], fromPage = ref$[1];
        $('body').removeClass('finder');
      }
      toPage.css({
        'left': 0
      }, time);
      fromPage.css({
        'left': moveLeft
      }, time);
      toPage.height('auto');
      fromPage.height(toPage.height());
      return $('body').height(toPage.height());
    };
    function Navbar(){
      Navbar.superclass.apply(this, arguments);
    }
    return Navbar;
  }(Backbone.View));
  Wordlists = (function(superclass){
    var prototype = extend$((import$(Wordlists, superclass).displayName = 'Wordlists', Wordlists), superclass).prototype, constructor = Wordlists;
    prototype.el = '#wordlists';
    prototype.settings = null;
    prototype.events = {
      'click .dict': function(){
        return this.select_wordlists(['dict']);
      },
      'click .wiki': function(){
        return this.select_wordlists(['wiki']);
      },
      'click .all': function(){
        return this.select_wordlists(map(function(it){
          return it.id;
        })(
        this.settings.get('current_language').wordlists));
      }
    };
    prototype.initialize = function(){
      this.settings = window.settings;
      return this.add_listeners();
    };
    prototype.add_listeners = function(){
      this.listenTo(this.settings, 'change:current_language', function(){
        this.select_default_wordlist();
        return this.render();
      });
      return this.listenTo(this.settings, 'change:current_wordlists', this.render);
    };
    prototype.select_default_wordlist = function(){
      return this.select_wordlists([function(it){
        return it.id;
      }(
      first(
      this.settings.get('current_language').wordlists))]);
    };
    prototype.select_wordlists = function(wordlists){
      return this.settings.set('current_wordlists', wordlists);
    };
    prototype.render = function(){
      var x$, i$, len$, wordlist, title, y$;
      this.$el.empty();
      this.$el.append('<span><b>Use:</b></span>');
      x$ = this.settings.get('current_language').wordlists;
      for (i$ = 0, len$ = x$.length; i$ < len$; ++i$) {
        wordlist = x$[i$];
        $('<span>').text(wordlist.capitalized).addClass(wordlist.id).appendTo(this.$el);
      }
      if (x$.length > 1) {
        title = x$.length === 2 ? 'Both' : 'All';
        $('<span>').text(title).addClass('all').appendTo(this.$el);
      }
      y$ = this.settings.get('current_wordlists');
      if (y$.length > 1) {
        this.$('.all').addClass('selected');
      } else {
        this.$("." + y$).addClass('selected');
      }
      return y$;
    };
    function Wordlists(){
      Wordlists.superclass.apply(this, arguments);
    }
    return Wordlists;
  }(Backbone.View));
  Languages = (function(superclass){
    var prototype = extend$((import$(Languages, superclass).displayName = 'Languages', Languages), superclass).prototype, constructor = Languages;
    prototype.el = '#languages';
    prototype.settings = null;
    prototype.events = {
      'click .flag': function(e){
        return this.set_current_language($(e.currentTarget).data('iso'));
      }
    };
    prototype.initialize = function(){
      this.settings = window.settings;
      this.add_listeners();
      return this.render();
    };
    prototype.add_listeners = function(){
      this.listenTo(this.settings, 'change:languages', this.render);
      return this.listenTo(this.settings, 'change:current_language', this.select_flag);
    };
    prototype.render = function(){
      var create_flag, i$, ref$, len$, iso, results$ = [];
      this.$el.empty();
      create_flag = function(iso){
        return "<span class=\"flag\" data-iso=\"" + iso + "\">\n     <img src=\"/img/gflags/png/" + iso + ".png\"/>\n</span>";
      };
      for (i$ = 0, len$ = (ref$ = this.settings.get('languages')).length; i$ < len$; ++i$) {
        iso = ref$[i$].iso;
        results$.push(this.$el.append(create_flag(iso)));
      }
      return results$;
    };
    prototype.select_flag = function(){
      var current_iso, this$ = this;
      current_iso = this.settings.get('current_language').iso;
      this.$el.addClass('nohover');
      setTimeout(function(){
        return this$.$el.removeClass('nohover');
      }, 1500);
      return this.$("[data-iso=" + current_iso + "]").detach().prependTo(this.$el);
    };
    prototype.set_current_language = function(iso){
      return this.settings.set('current_language', this.settings.language_from_iso(iso));
    };
    function Languages(){
      Languages.superclass.apply(this, arguments);
    }
    return Languages;
  }(Backbone.View));
  Anagram = (function(superclass){
    var prototype = extend$((import$(Anagram, superclass).displayName = 'Anagram', Anagram), superclass).prototype, constructor = Anagram;
    prototype.connection = null;
    prototype.settings = null;
    prototype.defaults = {
      valid: false,
      text: '',
      conflicting_letter_indices: [],
      suggestions: []
    };
    prototype.initialize = function(){
      this.settings = window.settings;
      this.connection = new APIConnection();
      this.get_suggestions();
      return this.add_listeners();
    };
    prototype.add_listeners = function(){
      this.on('change:text change:conflicting_letter_indices', this.get_suggestions);
      return this.listenTo(this.settings, 'change:current_language change:current_wordlists', this.get_suggestions);
    };
    prototype.get_suggestions = function(){
      var word, iso, wordlists, this$ = this;
      word = this.collection
        ? this.conflicting_letters()
        : this.get('text');
      iso = this.settings.get('current_language').iso;
      wordlists = this.settings.get('current_wordlists');
      return this.connection.get_suggestions(word, wordlists, iso, function(suggestions_data){
        return this$.set('suggestions', map(function(data){
          return new Suggestion(data);
        })(
        suggestions_data));
      });
    };
    prototype.conflicting_letters = function(){
      var text;
      text = this.get('text');
      return map(function(it){
        return text[it];
      })(
      this.get('conflicting_letter_indices'));
    };
    prototype.toString = function(){
      return this.get('text').toLowerCase();
    };
    prototype.chars = function(){
      return this.toString().split('');
    };
    function Anagram(){
      Anagram.superclass.apply(this, arguments);
    }
    return Anagram;
  }(Backbone.Model));
  AnagramView = (function(superclass){
    var prototype = extend$((import$(AnagramView, superclass).displayName = 'AnagramView', AnagramView), superclass).prototype, constructor = AnagramView;
    prototype.tagName = 'div';
    prototype.className = 'anagram-field';
    prototype.attributes = {
      contentEditable: true
    };
    prototype.events = {
      'input': function(){
        return this.update();
      }
    };
    prototype.initialize = function(){
      this.render();
      return this.add_listeners();
    };
    prototype.add_listeners = function(){
      return this.listenTo(this.model, 'change:conflicting_letter_indices', this.color_conflicting_letters);
    };
    prototype.render = function(){
      this.$el.text(this.model.get('text'));
      return this.update();
    };
    prototype.update = function(){
      this.model.set('text', this.$el.text());
      this.spanwrap();
      return this.color_conflicting_letters();
    };
    prototype.color_conflicting_letters = function(){
      var this$ = this;
      this.$('span').removeClass('mismatch');
      return this.model.get('conflicting_letter_indices').forEach(function(letter_index){
        letter_index += 1;
        return this$.$(".char" + letter_index).addClass('mismatch');
      });
    };
    prototype.spanwrap = function(){
      " Wraps all individual text characters in a <span> tag via lettering.js\nThis allows us to set the CSS of all letters individually.\nE.g: 'ab' -> '<span class=\"char1\">a</span><span class=\"char2\">b</span>'\nCaret position is conserved. ";
      var range, focus_node, focus_offset, character_position, x$, y$;
      if (window.getSelection().rangeCount === 0) {
        return;
      }
      range = window.getSelection().getRangeAt(0).cloneRange();
      focus_node = range.startContainer.parentElement;
      focus_offset = range.startOffset;
      if ($.contains(this.el, focus_node)) {
        character_position = $(focus_node).prevAll().length + focus_offset;
        if (focus_node.childNodes.length === 2) {
          if (focus_node.childNodes[1].nodeType === 3) {
            character_position += 1;
          }
        }
      } else if (this.el === focus_node) {
        if ($(range.startContainer).text() !== '') {
          character_position = focus_offset;
        } else {
          character_position = Math.max(1, this.el.childNodes.length - 1);
        }
      } else {
        this.$el.lettering();
        return;
      }
      this.$el.lettering();
      x$ = range;
      x$.setStart(this.el.childNodes[character_position - 1], 1);
      x$.collapse(true);
      y$ = window.getSelection();
      y$.removeAllRanges();
      y$.addRange(range);
      return y$;
    };
    function AnagramView(){
      AnagramView.superclass.apply(this, arguments);
    }
    return AnagramView;
  }(Backbone.View));
  Suggestion = (function(superclass){
    var prototype = extend$((import$(Suggestion, superclass).displayName = 'Suggestion', Suggestion), superclass).prototype, constructor = Suggestion;
    prototype.defaults = {
      word: null,
      language: null,
      source: null
    };
    function Suggestion(){
      Suggestion.superclass.apply(this, arguments);
    }
    return Suggestion;
  }(Backbone.Model));
  SuggestionView = (function(superclass){
    var prototype = extend$((import$(SuggestionView, superclass).displayName = 'SuggestionView', SuggestionView), superclass).prototype, constructor = SuggestionView;
    prototype.tagName = 'a';
    prototype.className = 'suggestion';
    prototype.attributes = {
      href: null,
      target: '_blank'
    };
    prototype.initialize = function(){
      this.$el.text(this.model.get('word'));
      switch (this.model.get('source')) {
      case 'dict':
        this.$el.prepend("<img src='/img/linkicon.png'/>");
        switch (this.model.get('language')) {
        case 'en':
          return this.$el.prop('href', "http://www.google.com/translate?hl=&sl=es&tl=en&u=http%3A%2F%2Fwww.merriam-webster.com%2Fdictionary%2F" + this.model.get('word') + "&anno=2&sandbox=0");
        default:
          return this.$el.prop('href', "http://" + this.model.get('language') + ".wiktionary.com/wiki/" + this.model.get('word'));
        }
        break;
      case 'wiki':
        this.$el.prepend("<img src='/img/wikilogo.png'/>");
        return this.$el.prop('href', "http://" + this.model.get('language') + ".wikipedia.com/wiki/" + this.model.get('word'));
      }
    };
    function SuggestionView(){
      this.initialize = bind$(this, 'initialize', prototype);
      SuggestionView.superclass.apply(this, arguments);
    }
    return SuggestionView;
  }(Backbone.View));
  AnagramValidator = (function(superclass){
    var prototype = extend$((import$(AnagramValidator, superclass).displayName = 'AnagramValidator', AnagramValidator), superclass).prototype, constructor = AnagramValidator;
    prototype.settings = null;
    prototype.model = Anagram;
    prototype.initialize = function(){
      this.settings = window.settings;
      this.add([new Anagram(), new Anagram()]);
      return this.add_listeners();
    };
    prototype.add_listeners = function(){
      var this$ = this;
      return this.on('add remove change:text', function(){
        this$.update_conflicting_letters();
        return this$.check_if_all_anagrams_are_valid();
      });
    };
    prototype.reject_ignored_chars = function(char_array){
      var alphabet;
      alphabet = this.settings.get('alphabet');
      return reject((function(it){
        return !in$(it, alphabet);
      }))(
      char_array);
    };
    prototype.check_if_all_anagrams_are_valid = function(){
      var validity;
      validity = empty(
      flatten(
      this.pluck('conflicting_letter_indices')));
      return this.invoke('set', {
        valid: validity
      });
    };
    prototype.update_conflicting_letters = function(){
      var this$ = this;
      return this.forEach(function(anagram){
        var other_anagrams, conflicts;
        other_anagrams = this$.filter((function(it){
          return it !== anagram;
        }));
        conflicts = unique(
        flatten(
        map(function(other){
          return this$.get_conflicting_letters(anagram, other);
        })(
        other_anagrams)));
        return anagram.set('conflicting_letter_indices', conflicts);
      });
    };
    prototype.get_conflicting_letters = function(target_anagram, other_anagram){
      var target_letters, other_letters, conflicting_letters, conflicting_indices;
      target_letters = target_anagram.chars();
      other_letters = other_anagram.chars();
      conflicting_letters = target_letters.filter(function(letter){
        var index;
        index = other_letters.indexOf(letter);
        if (index > -1) {
          other_letters[index] = 'matched';
          return false;
        } else {
          return true;
        }
      });
      conflicting_letters = this.reject_ignored_chars(conflicting_letters);
      conflicting_indices = conflicting_letters.map(function(letter){
        var index;
        index = target_letters.lastIndexOf(letter);
        target_letters[index] = 'matched';
        return index;
      });
      return conflicting_indices;
    };
    function AnagramValidator(){
      AnagramValidator.superclass.apply(this, arguments);
    }
    return AnagramValidator;
  }(Backbone.Collection));
  AnagramValidatorView = (function(superclass){
    var prototype = extend$((import$(AnagramValidatorView, superclass).displayName = 'AnagramValidatorView', AnagramValidatorView), superclass).prototype, constructor = AnagramValidatorView;
    prototype.el = '#validator';
    prototype.views = [];
    prototype.events = {
      'click .add-field:not(.disabled)': function(){
        return this.collection.push(new Anagram());
      },
      'click .remove-field:not(.disabled)': function(){
        return this.collection.pop();
      }
    };
    prototype.initialize = function(){
      this.render();
      this.update_guide_text();
      this.disable_or_enable_buttons();
      return this.add_listeners();
    };
    prototype.add_listeners = function(){
      this.listenTo(this.collection, 'change:suggestions add remove', this.update_suggestions);
      this.listenTo(this.collection, 'change:valid', this.update_validity);
      this.listenTo(this.collection, 'add', this.add_new_field);
      this.listenTo(this.collection, 'remove', this.remove_last_field);
      return this.listenTo(this.collection, 'add remove', function(){
        this.update_guide_text();
        return this.disable_or_enable_buttons();
      });
    };
    prototype.render = function(){
      var this$ = this;
      return this.collection.forEach(function(anagram){
        var view;
        view = new AnagramView({
          model: anagram
        });
        this$.views.push(view);
        return this$.$('.fields').append(view.$el);
      });
    };
    prototype.update_suggestions = function(){
      var anagram_texts, anagram_suggestions, zipped, i$, len$, ref$, text, suggestions, suggestions_container, j$, len1$, suggestion, suggestion_view;
      if (!this.collection.at(0).get('valid')) {
        this.$('.suggestions').empty();
        anagram_texts = this.collection.map(function(it){
          return it.conflicting_letters();
        });
        anagram_suggestions = this.collection.pluck('suggestions');
        zipped = zip(anagram_texts, anagram_suggestions);
        zipped = reject(function(it){
          return empty(
          it[1]);
        })(
        zipped);
        for (i$ = 0, len$ = zipped.length; i$ < len$; ++i$) {
          ref$ = zipped[i$], text = ref$[0], suggestions = ref$[1];
          this.$('.suggestions').append("<div>Suggested anagrams of missing letters <span class='original'>" + join$.call(text, '') + "</span></div>");
          suggestions_container = $("<div class='suggestion-list'></div>");
          for (j$ = 0, len1$ = suggestions.length; j$ < len1$; ++j$) {
            suggestion = suggestions[j$];
            suggestion_view = new SuggestionView({
              model: suggestion
            });
            suggestions_container.append(suggestion_view.el);
          }
          this.$('.suggestions').append(suggestions_container);
        }
      }
      return $('body').height(this.$el.height());
    };
    prototype.update_guide_text = function(){
      this.$('.guide .plurality').text(['', 's'][Number(this.collection.length > 2)]);
      return this.$('.guide .amount').text(['zero', 'one', 'two', 'three', 'four', 'five'][this.collection.length]);
    };
    prototype.disable_or_enable_buttons = function(){
      this.$('.add-field, .remove-field').removeClass('disabled');
      if (this.collection.length === 2) {
        this.$('.remove-field').addClass('disabled');
      }
      if (this.collection.length === 4) {
        return this.$('.add-field').addClass('disabled');
      }
    };
    prototype.add_new_field = function(){
      var newest_anagram, view;
      newest_anagram = this.collection.last();
      view = new AnagramView({
        model: newest_anagram
      });
      this.views.push(view);
      this.$('.fields').append(view.$el);
      view.$el.css({
        width: 0
      });
      return view.$el.animate({
        width: 200
      }, 500);
    };
    prototype.remove_last_field = function(){
      var view;
      view = this.views.pop();
      return view.$el.animate({
        width: 0,
        'margin-left': 0,
        'margin-right': 0
      }, 500, function(){
        return $(this).remove();
      });
    };
    prototype.update_validity = function(){
      var valid, not_all_empty;
      valid = this.collection.at(0).get('valid');
      not_all_empty = this.collection.pluck('text').join('') !== '';
      if (valid && not_all_empty) {
        return $('body').addClass('success');
      } else {
        return $('body').removeClass('success');
      }
    };
    function AnagramValidatorView(){
      AnagramValidatorView.superclass.apply(this, arguments);
    }
    return AnagramValidatorView;
  }(Backbone.View));
  AnagramFinder = (function(superclass){
    var prototype = extend$((import$(AnagramFinder, superclass).displayName = 'AnagramFinder', AnagramFinder), superclass).prototype, constructor = AnagramFinder;
    prototype.defaults = {
      anagram: null
    };
    prototype.initialize = function(){
      this.settings = window.settings;
      this.set('anagram', new Anagram());
      return this.add_listeners();
    };
    prototype.add_listeners = function(){};
    function AnagramFinder(){
      AnagramFinder.superclass.apply(this, arguments);
    }
    return AnagramFinder;
  }(Backbone.Model));
  AnagramFinderView = (function(superclass){
    var prototype = extend$((import$(AnagramFinderView, superclass).displayName = 'AnagramFinderView', AnagramFinderView), superclass).prototype, constructor = AnagramFinderView;
    prototype.el = '#finder';
    prototype.initialize = function(){
      this.settings = window.settings;
      this.render();
      return this.add_listeners();
    };
    prototype.add_listeners = function(){
      this.listenTo(this.settings, 'change:current_language', this.update_guide_text);
      return this.listenTo(this.model.get('anagram'), 'change:suggestions', this.update_suggestions);
    };
    prototype.render = function(){
      var anagram, view;
      anagram = this.model.get('anagram');
      view = new AnagramView({
        model: anagram
      });
      view.$el.width(field_width * 1.25);
      return this.$('.fields').append(view.$el);
    };
    prototype.update_suggestions = function(){
      var text, suggestions, suggestions_container, i$, len$, suggestion, suggestion_view;
      this.$('.suggestions').empty();
      text = this.model.get('anagram').get('text');
      suggestions = this.model.get('anagram').get('suggestions');
      suggestions_container = $("<div class='suggestion-list'></div>");
      if (empty(suggestions) && text !== '') {
        suggestions_container.append("<div class='suggestion'>No anagrams found</div>");
      } else {
        for (i$ = 0, len$ = suggestions.length; i$ < len$; ++i$) {
          suggestion = suggestions[i$];
          suggestion_view = new SuggestionView({
            model: suggestion
          });
          suggestions_container.append(suggestion_view.el);
        }
      }
      this.$('.suggestions').append(suggestions_container);
      return $('body').height(this.$el.height());
    };
    prototype.update_guide_text = function(){
      return this.$('.language').text(this.settings.get('current_language').name);
    };
    function AnagramFinderView(){
      AnagramFinderView.superclass.apply(this, arguments);
    }
    return AnagramFinderView;
  }(Backbone.View));
  $(function(){
    var languages, wordlists, navbar, anagram_validator, anagram_validator_view, anagram_finder, anagram_finder_view;
    window.settings = new Settings();
    languages = new Languages();
    wordlists = new Wordlists();
    navbar = new Navbar();
    anagram_validator = new AnagramValidator();
    anagram_validator_view = new AnagramValidatorView({
      collection: anagram_validator
    });
    anagram_finder = new AnagramFinder();
    return anagram_finder_view = new AnagramFinderView({
      model: anagram_finder
    });
  });
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
