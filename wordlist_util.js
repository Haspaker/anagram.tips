// Generated by LiveScript 1.2.0
(function(){
  var fs, ref$, countBy, groupBy, filter, objToPairs, pairsToObj, unique, sort, map, foldl1, alphabet, action, wordfile, target, words, wordsByLength, i$, len$, length, filepath, isClean, slice$ = [].slice, join$ = [].join;
  fs = require('fs');
  ref$ = require('prelude-ls'), countBy = ref$.countBy, groupBy = ref$.groupBy, filter = ref$.filter, objToPairs = ref$.objToPairs, pairsToObj = ref$.pairsToObj, unique = ref$.unique, sort = ref$.sort, map = ref$.map, foldl1 = ref$.foldl1;
  alphabet = 'abcdefghijklmnopqrstuvwxyz' + 'åäöø';
  ref$ = slice$.call(process.argv, 2), action = ref$[0], wordfile = ref$[1], target = ref$[2];
  words = fs.readFileSync(wordfile, {
    encoding: 'utf8'
  });
  if (action === 'lengthsort') {
    words = words.split('\n');
    wordsByLength = objToPairs(
    groupBy(function(it){
      return it.length;
    })(
    words));
    for (i$ = 0, len$ = wordsByLength.length; i$ < len$; ++i$) {
      ref$ = wordsByLength[i$], length = ref$[0], words = ref$[1];
      filepath = target + (length + ".txt");
      console.log("(" + length + " characters) Writing " + words.length + " words to " + filepath);
      fs.writeFile(filepath, join$.call(words, '\n'));
    }
  }
  if (action === 'cleansort') {
    isClean = function(word){
      var i$, ref$, len$, char;
      for (i$ = 0, len$ = (ref$ = word.toLowerCase()).length; i$ < len$; ++i$) {
        char = ref$[i$];
        if (!in$(char, alphabet)) {
          return false;
        }
      }
      return true;
    };
    words = words.split('\n');
    wordsByLength = objToPairs(
    groupBy(function(it){
      return it.length;
    })(
    filter(isClean)(
    words)));
    for (i$ = 0, len$ = wordsByLength.length; i$ < len$; ++i$) {
      ref$ = wordsByLength[i$], length = ref$[0], words = ref$[1];
      filepath = target + (length + ".txt");
      console.log("(" + length + " characters) Writing " + words.length + " words to " + filepath);
      fs.writeFile(filepath, join$.call(words, '\n'));
    }
  } else if (action === 'alphabet') {
    words = words.toLowerCase();
    alphabet = unique(
    words.split(''));
    console.log(join$.call(alphabet, ' '));
  } else if (action === 'specialchars') {
    words = words.toLowerCase();
    alphabet = filter((function(it){
      return it !== "A" && it !== "B" && it !== "C" && it !== "D" && it !== "E" && it !== "F" && it !== "G" && it !== "H" && it !== "I" && it !== "J" && it !== "K" && it !== "L" && it !== "M" && it !== "N" && it !== "O" && it !== "P" && it !== "Q" && it !== "R" && it !== "S" && it !== "T" && it !== "U" && it !== "V" && it !== "W" && it !== "X" && it !== "Y" && it !== "Z" && it !== "[" && it !== "\\" && it !== "]" && it !== "^" && it !== "_" && it !== "`" && it !== "a" && it !== "b" && it !== "c" && it !== "d" && it !== "e" && it !== "f" && it !== "g" && it !== "h" && it !== "i" && it !== "j" && it !== "k" && it !== "l" && it !== "m" && it !== "n" && it !== "o" && it !== "p" && it !== "q" && it !== "r" && it !== "s" && it !== "t" && it !== "u" && it !== "v" && it !== "w" && it !== "x" && it !== "y" && it !== "z";
    }))(
    unique(
    words.split('')));
    console.log(join$.call(alphabet, ' '));
  } else if (action === 'containing') {
    words = words.split('\n');
    words = words.filter((function(it){
      return in$(target, it);
    }));
    console.log(join$.call(words, '\n'));
  }
  function in$(x, xs){
    var i = -1, l = xs.length >>> 0;
    while (++i < l) if (x === xs[i]) return true;
    return false;
  }
}).call(this);
